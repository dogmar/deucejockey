doctype html
html
	head
		title= 'Title, bitches'
		//- If this stops working make sure there's a trailing space after inject:*** lines
		// inject:css 
		// endinject 
	body
		#content
			h2 Facetracking example
			#container.video-container
				video#videoel(width='400', height='300', preload='auto', loop='')
					// <video id="videoel" width="320" height="240" preload="auto">
					// <source src="./media/franck.ogv" type="video/ogg"/>
				canvas#overlay(width='400', height='300')
			br
			input#startbutton.btn(type='button', value='wait, loading video', disabled='disabled')
			input#resetbutton.btn(type='button', value='reset')
			div#face-content
			script#face-template(type='text/ractive')
				ul
					='{{#faces}}'
						li
							p='Face height: {{height}}'
							p='Left: {{Math.floor(eyebrows.left.height * 1000) * 0.01}}%'
							p='Right: {{Math.floor(eyebrows.right.height * 1000) * 0.01}}%'
					='{{/faces}}'
			#text
				p
					| This is an example of face tracking using the javascript library
					a(href='https://github.com/auduno/clmtrackr')
						em clmtrackr
					| . The fitting method is generally called "Non-rigid/deformable face tracking/alignment using constrained local models".
				p
					| Note that this example works best in Google Chrome, with a computer that supports WebGL and floating point textures. It should however work in any modern browser.
				#gum.gum
					p
						| To try it out:
					ol
						li allow the page to use your webcamera
						li make sure that your face is clearly visible in the video, and click start
						li see the model fitted to your face
						ol
							p
				#nogum.nogum
					p
						| There was some problem trying to capture your webcamera, please check that your browser supports WebRTC. Using a fallback video instead. To try it out:
					ol
						li click start
						li see the model fitted to the face
					p
		section#todoapp
			header#header
				h1 todos
				input#new-todo(placeholder='What needs to be done?', autofocus='autofocus')
			section#main
				input#toggle-all(type='checkbox')
				label(for='toggle-all') Mark all as complete
				ul#todo-list
			footer#footer
		script(type='text/template' id='item-template').
			<div class="view">
				<input class="toggle" type="checkbox" <%= completed ? 'checked' : '' %>>
				<label><%- title %></label>
				<button class="destroy"></button>
			</div>
			<input class="edit" value="<%- title %>">
		script(type='text/template' id='stats-template').
			<span id="todo-count"><strong><%= remaining %></strong> <%= remaining === 1 ? 'item' : 'items' %> left</span>
			<ul id="filters">
				<li>
					<a class="selected" href="#/">All</a>
				</li>
				<li>
					<a href="#/active">Active</a>
				</li>
				<li>
					<a href="#/completed">Completed</a>
				</li>
			</ul>
			<% if (completed) { %>
			<button id="clear-completed">Clear completed (<%= completed %>)</button>
			<% } %>
		// inject:js 
		// endinject 

